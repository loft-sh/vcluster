// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	managementv1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	scheme "github.com/loft-sh/api/v4/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// NodeEnvironmentsGetter has a method to return a NodeEnvironmentInterface.
// A group's client should implement this interface.
type NodeEnvironmentsGetter interface {
	NodeEnvironments(namespace string) NodeEnvironmentInterface
}

// NodeEnvironmentInterface has methods to work with NodeEnvironment resources.
type NodeEnvironmentInterface interface {
	Create(ctx context.Context, nodeEnvironment *managementv1.NodeEnvironment, opts metav1.CreateOptions) (*managementv1.NodeEnvironment, error)
	Update(ctx context.Context, nodeEnvironment *managementv1.NodeEnvironment, opts metav1.UpdateOptions) (*managementv1.NodeEnvironment, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, nodeEnvironment *managementv1.NodeEnvironment, opts metav1.UpdateOptions) (*managementv1.NodeEnvironment, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*managementv1.NodeEnvironment, error)
	List(ctx context.Context, opts metav1.ListOptions) (*managementv1.NodeEnvironmentList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *managementv1.NodeEnvironment, err error)
	NodeEnvironmentExpansion
}

// nodeEnvironments implements NodeEnvironmentInterface
type nodeEnvironments struct {
	*gentype.ClientWithList[*managementv1.NodeEnvironment, *managementv1.NodeEnvironmentList]
}

// newNodeEnvironments returns a NodeEnvironments
func newNodeEnvironments(c *ManagementV1Client, namespace string) *nodeEnvironments {
	return &nodeEnvironments{
		gentype.NewClientWithList[*managementv1.NodeEnvironment, *managementv1.NodeEnvironmentList](
			"nodeenvironments",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *managementv1.NodeEnvironment { return &managementv1.NodeEnvironment{} },
			func() *managementv1.NodeEnvironmentList { return &managementv1.NodeEnvironmentList{} },
		),
	}
}
