suite: ControlPlane StatefulSet
templates:
  - statefulset.yaml

tests:
  - it: should not create control-plane
    set:
      experimental:
        isolatedControlPlane:
          headless: true
    asserts:
      - hasDocuments:
          count: 0

  - it: image name
    set:
      controlPlane:
        statefulSet:
          image:
            registry: "custom-registry.com"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-registry.com/loft-sh/vcluster-pro:0.0.1

  - it: defaultImageRegistry
    set:
      controlPlane:
        advanced:
          defaultImageRegistry: docker.io
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: docker.io/loft-sh/vcluster-pro:0.0.1

  - it: custom tag
    set:
      controlPlane:
        statefulSet:
          image:
            repository: my-repo
            tag: "custom-tag"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: ghcr.io/my-repo:custom-tag

  - it: custom init container
    set:
      controlPlane:
        distro:
          k3s:
            enabled: true
            image:
              registry: "ghcr.io"
              repository: "test"
              tag: "123"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: ghcr.io/test:123

  - it: custom init container
    set:
      controlPlane:
        distro:
          k0s:
            enabled: true
            image:
              registry: ""
              repository: "k0s"
              tag: "123"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: k0s:123

  - it: disables serviceLinks for sts etcd pod
    set:
      controlPlane:
        statefulSet:
          enableServiceLinks: false
    asserts:
      - equal:
          path: spec.template.spec.enableServiceLinks
          value: false

  - it: custom init container
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
            controllerManager:
              image:
                registry: ""
                repository: "k8s-controller"
                tag: "123"
            apiServer:
              image:
                registry: ""
                repository: "k8s-api"
                tag: "456"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[1].image
          value: k8s-controller:123
      - equal:
          path: spec.template.spec.initContainers[2].image
          value: k8s-api:456

  - it: custom init container
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
            controllerManager:
              image:
                repository: "k8s-controller"
                tag: "123"
            apiServer:
              image:
                repository: "k8s-api"
                tag: "456"
        advanced:
          defaultImageRegistry: "bbb.com"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[1].image
          value: bbb.com/k8s-controller:123
      - equal:
          path: spec.template.spec.initContainers[2].image
          value: bbb.com/k8s-api:456

  - it: name & defaults
    release:
      name: my-release
      namespace: my-namespace
    capabilities:
      majorVersion: 1
      minorVersion: 29
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].image
          value: ghcr.io/loft-sh/vcluster-pro:0.0.1
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: VCLUSTER_NAME
            value: my-release
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: data
            mountPath: /data
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: binaries
            mountPath: /binaries
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: certs
            mountPath: /pki
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: helm-cache
            mountPath: /.cache/helm
      - equal:
          path: metadata.name
          value: my-release
      - equal:
          path: metadata.namespace
          value: my-namespace
      - equal:
          path: spec.podManagementPolicy
          value: Parallel
      - equal:
          path: spec.persistentVolumeClaimRetentionPolicy.whenDeleted
          value: Retain
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.template.metadata.labels.app
          value: vcluster
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 10
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes[0]
          value: ReadWriteOnce
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: 5Gi

  - it: fail when both backing stores are enabled
    set:
      controlPlane:
        backingStore:
          etcd:
            embedded:
              enabled: true
            deploy:
              enabled: true
    asserts:
      - failedTemplate:
          errorMessage: "you can only enable one backingStore at the same time"

  - it: not persistent when external etcd is enabled
    set:
      controlPlane:
        backingStore:
          etcd:
            deploy:
              enabled: true
    asserts:
      - equal:
          path: kind
          value: Deployment
      - notExists:
          path: spec.volumeClaimTemplates

  - it: not persistent when k8s and external database
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
        backingStore:
          database:
            external:
              enabled: true
    asserts:
      - equal:
          path: kind
          value: Deployment
      - notExists:
          path: spec.volumeClaimTemplates

  - it: persistent when embedded database
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
        backingStore:
          database:
            embedded:
              enabled: true
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1

  - it: persistent when k8s and embedded etcd
    set:
      controlPlane:
        backingStore:
          etcd:
            embedded:
              enabled: true
        distro:
          k8s:
            enabled: true
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1

  - it: persistent when embedded database
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1

  - it: plugin 1
    set:
      plugins:
        test:
          image: test
      plugin:
        test123:
          version: v2
          image: test
    asserts:
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 7
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 5

  - it: plugin volumes 2
    set:
      controlPlane:
        distro:
          k0s:
            enabled: true
      plugin:
        test:
          version: v2
          image: test
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 8
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 2

  - it: plugin volumes 3
    set:
      plugin:
        test:
          image: test
    asserts:
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 6
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 3

  - it: add volumes
    set:
      controlPlane:
        distro:
          k3s:
            enabled: true
        statefulSet:
          persistence:
            addVolumes:
              - name: myVolume
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: myVolume
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 8

  - it: enable k8s
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1

  - it: enable k8s with deploy etcd
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
        backingStore:
          etcd:
            deploy:
              enabled: true
    asserts:
      - equal:
          path: kind
          value: Deployment
      - notExists:
          path: spec.volumeClaimTemplates
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            emptyDir: {}

  - it: enable k8s
    release:
      name: my-release
      namespace: my-namespace
    set:
      controlPlane:
        distro:
          k8s:
            enabled: true
        statefulSet:
          persistence:
            volumeClaim:
              enabled: false
            volumeClaimTemplates:
              - metadata:
                  name: data
                spec:
                  resources:
                    requests:
                      storage: 5Gi
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - equal:
          path: spec.serviceName
          value: my-release-headless
      - contains:
          path: spec.volumeClaimTemplates
          content:
            metadata:
              name: data
            spec:
              resources:
                requests:
                  storage: 5Gi

  - it: enable eks
    set:
      controlPlane:
        distro:
          eks:
            enabled: true
    release:
      name: my-release
      namespace: my-namespace
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - equal:
          path: spec.serviceName
          value: my-release-headless
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1

  - it: enable eks with deploy etcd
    set:
      controlPlane:
        distro:
          eks:
            enabled: true
        backingStore:
          etcd:
            deploy:
              enabled: true
    asserts:
      - equal:
          path: kind
          value: Deployment
      - notExists:
          path: spec.volumeClaimTemplates
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            emptyDir: {}

  - it: enable k0s
    set:
      controlPlane:
        backingStore:
          etcd:
            deploy:
              enabled: true
        distro:
          k0s:
            enabled: true
    asserts:
      - equal:
          path: kind
          value: Deployment
      - notExists:
          path: spec.volumeClaimTemplates
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            emptyDir: {}

  - it: append distro env
    set:
      controlPlane:
        distro:
          k3s:
            enabled: true
            env:
            - name: KEY
              value: VALUE
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KEY
            value: VALUE


