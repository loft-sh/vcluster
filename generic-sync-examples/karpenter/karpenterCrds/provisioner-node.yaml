apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: vcluster-nodetemplate-example
spec:
  subnetSelector:
    karpenter.sh/discovery: '<CLUSTER_NAME>'
  securityGroupSelector:
    karpenter.sh/discovery: '<CLUSTER_NAME>'
  # instanceProfile:         ,
  amiFamily: Bottlerocket         
  # amiSelector: { ... }           # optional, discovers tagged amis to override the amiFamily's default
  # userData: "..."                # optional, overrides autogenerated userdata with a merge semantic
  tags:
    project: vcluster
  metadataOptions: { ... }       # optional, configures IMDS for the instance
  blockDeviceMappings:
    # Root device
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 4Gi
        volumeType: gp3
        encrypted: true
    # Data device: Container resources such as images and logs
    - deviceName: /dev/xvdb
      ebs:
        volumeSize: 20Gi
        volumeType: gp3
        encrypted: true
  detailedMonitoring: true

---

apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: vcluster-provisioner-example
spec:
  # References cloud provider-specific custom resource, see your cloud provider specific documentation
  providerRef:
    name: vcluster-nodetemplate-example

  # Provisioned nodes will have these taints
  # Taints may prevent pods from scheduling if they are not tolerated by the pod.
  taints: []
    # - key: vcluster.com
    #   effect: NoSchedule

  # Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by this
  # provisioner. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible for
  # removing the taint after it has finished initializing the node.
  startupTaints: []
    # - key: startup.taint/none
    #   effect: NoSchedule

  # Labels are arbitrary key-values that are applied to all nodes
  labels:
    project: vcluster

  # Annotations are arbitrary key-values that are applied to all nodes
  annotations:
    project: vcluster

  # Requirements that constrain the parameters of provisioned nodes.
  # These requirements are combined with pod.spec.affinity.nodeAffinity rules.
  # Operators { In, NotIn } are supported to enable including or excluding values
  requirements:
    - key: "karpenter.k8s.aws/instance-category"
      operator: In
      values: ["c", "m", "r"]
    - key: "karpenter.k8s.aws/instance-cpu"
      operator: In
      values: ["4", "8", "16", "32"]
    - key: karpenter.k8s.aws/instance-generation
      operator: Gt
      values: ["2"]
    - key: "kubernetes.io/arch"
      operator: In
      values: ["arm64", "amd64"]
    - key: "karpenter.sh/capacity-type" # If not included, the webhook for the AWS cloud provider will default to on-demand
      operator: In
      values: ["spot", "on-demand"]
  
  # Resource limits constrain the total size of the cluster.
  # Limits prevent Karpenter from creating new instances once the limit is exceeded.
  limits:
    # resources:
    #   cpu: "1000m"
    #   memory: 1000Gi

  # Enables consolidation which attempts to reduce cluster cost by both removing un-needed nodes and down-sizing those
  # that can't be removed.  Mutually exclusive with the ttlSecondsAfterEmpty parameter.
  consolidation:
    enabled: true

  # If omitted, the feature is disabled and nodes will never expire.  If set to less time than it requires for a node
  # to become ready, the node may expire before any pods successfully start.
  ttlSecondsUntilExpired: 2592000 # 30 Days = 60 * 60 * 24 * 30 Seconds;

  # # If omitted, the feature is disabled, nodes will never scale down due to low utilization
  # ttlSecondsAfterEmpty: 30

  # Priority given to the provisioner when the scheduler considers which provisioner
  # to select. Higher weights indicate higher priority when comparing provisioners.
  # Specifying no weight is equivalent to specifying a weight of 0.
  weight: 10
  