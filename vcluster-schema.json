{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/loft-sh/vcluster/pkg/config/config",
  "$defs": {
    "Export": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        },
        "selector": {
          "$ref": "#/$defs/Selector",
          "description": "Selector is a label selector to select the synced objects in the virtual cluster.\nIf empty, all objects will be synced."
        }
      },
      "type": "object"
    },
    "Hook": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Verbs are the verbs that the hook should mutate"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the object to be synced"
        }
      },
      "type": "object"
    },
    "Hooks": {
      "properties": {
        "hostToVirtual": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "HostToVirtual is a hook that is executed before syncing from the host to the virtual cluster"
        },
        "virtualToHost": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "VirtualToHost is a hook that is executed before syncing from the virtual to the host cluster"
        }
      },
      "type": "object"
    },
    "Import": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        }
      },
      "type": "object"
    },
    "Patch": {
      "properties": {
        "op": {
          "type": "string",
          "description": "Operation is the type of the patch"
        },
        "fromPath": {
          "type": "string",
          "description": "FromPath is the path from the other object"
        },
        "path": {
          "type": "string",
          "description": "Path is the path of the patch"
        },
        "namePath": {
          "type": "string",
          "description": "NamePath is the path to the name of a child resource within Path"
        },
        "namespacePath": {
          "type": "string",
          "description": "NamespacePath is path to the namespace of a child resource within Path"
        },
        "value": {
          "description": "Value is the new value to be set to the path"
        },
        "regex": {
          "type": "string",
          "description": "Regex - is regular expresion used to identify the Name,\nand optionally Namespace, parts of the field value that\nwill be replaced with the rewritten Name and/or Namespace"
        },
        "conditions": {
          "items": {
            "$ref": "#/$defs/PatchCondition"
          },
          "type": "array",
          "description": "Conditions are conditions that must be true for\nthe patch to get executed"
        },
        "ignore": {
          "type": "boolean",
          "description": "Ignore determines if the path should be ignored if handled as a reverse patch"
        },
        "sync": {
          "$ref": "#/$defs/PatchSync",
          "description": "Sync defines if a specialized syncer should be initialized using values\nfrom the rewriteName operation as Secret/Configmap names to be synced"
        }
      },
      "type": "object"
    },
    "PatchCondition": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is the path within the object to select"
        },
        "subPath": {
          "type": "string",
          "description": "SubPath is the path below the selected object to select"
        },
        "equal": {
          "description": "Equal is the value the path should be equal to"
        },
        "notEqual": {
          "description": "NotEqual is the value the path should not be equal to"
        },
        "empty": {
          "type": "boolean",
          "description": "Empty means that the path value should be empty or unset"
        }
      },
      "type": "object"
    },
    "PatchSync": {
      "properties": {
        "secret": {
          "type": "boolean"
        },
        "configmap": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Selector": {
      "properties": {
        "labelSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "LabelSelector are the labels to select the object from"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "version": {
      "type": "string",
      "description": "Version is the config version"
    },
    "export": {
      "items": {
        "$ref": "#/$defs/Export"
      },
      "type": "array",
      "description": "Exports syncs a resource from the virtual cluster to the host"
    },
    "import": {
      "items": {
        "$ref": "#/$defs/Import"
      },
      "type": "array",
      "description": "Imports syncs a resource from the host cluster to virtual cluster"
    },
    "hooks": {
      "$ref": "#/$defs/Hooks",
      "description": "Hooks are hooks that can be used to inject custom patches before syncing"
    }
  },
  "type": "object"
}