version: v2beta1
name: vcluster

# Variables used
vars:
  # Make sure vcluster is the default namespace
  DEVSPACE_FLAGS: "-n vcluster"
  SYNCER_IMAGE: ghcr.io/loft-sh/loft-enterprise/dev-vcluster
  COMMON_VALUES: ./test/functional_tests/commonValues.yaml
  PRO_VALUES: ./test/functional_tests/proValues.yaml
  VALUES_FILE: ./test/functional_tests/e2e/values.yaml

# Images DevSpace will build for vcluster
images:
  vcluster:
    dockerfile: ./Dockerfile
    image: ${SYNCER_IMAGE}
    rebuildStrategy: ignoreContextChanges
    target: builder
    buildKit: {}

# Deployment used for vcluster
deployments:
  vcluster-k8s:
    helm:
      releaseName: vcluster
      chart:
        name: ./chart
      values:
        controlPlane:
          distro:
            k8s:
              enabled: true
          statefulSet:
            image:
              registry: ""
              repository: image(${SYNCER_IMAGE})
              tag: tag(${SYNCER_IMAGE})
            scheduling:
              tolerations:
                - operator: "Exists"
          service:
            spec:
              type: NodePort
          advanced:
            serviceAccount:
              enabled: false
              name: default
        telemetry:
          enabled: false

  vcluster-k3s:
    helm:
      releaseName: vcluster
      chart:
        name: ./chart
      values:
        controlPlane:
          distro:
            k3s:
              enabled: true
          statefulSet:
            image:
              registry: ""
              repository: image(${SYNCER_IMAGE})
              tag: tag(${SYNCER_IMAGE})
            scheduling:
              tolerations:
                - operator: "Exists"
          service:
            spec:
              type: NodePort
          advanced:
            serviceAccount:
              enabled: false
              name: default
        telemetry:
          enabled: false

  vcluster-k0s:
    helm:
      releaseName: vcluster
      chart:
        name: ./chart
      values:
        controlPlane:
          distro:
            k0s:
              enabled: true
          statefulSet:
            image:
              registry: ""
              repository: image(${SYNCER_IMAGE})
              tag: tag(${SYNCER_IMAGE})
            scheduling:
              tolerations:
                - operator: "Exists"
          service:
            spec:
              type: NodePort
          advanced:
            serviceAccount:
              enabled: false
              name: default
        telemetry:
          enabled: false

# Dev Configuration for vcluster
dev:
  vcluster:
    imageSelector: ${SYNCER_IMAGE}
    container: syncer
    workingDir: /vcluster-dev
    resources:
      limits:
        cpu: "0" # to prevent CPU throttling during compilation
        memory: "0" # to prevent OOM kills which can happen during first compilation due to high number of deps
    terminal:
      command: "./devspace_start.sh"
    ports:
      - port: 2346:2345
    sync:
      - excludePaths:
          - "**"
          - "!/pkg"
          - "cmd/vclusterctl/cmd/charts"
          - "!/cmd"
          - "!/vendor"
          - "!/config"
          - "!/hack"
          - "!/go.mod"
          - "!/go.sum"
          - "!/devspace_start.sh"
          - "!/manifests"
          - "/manifests/coredns" # shouldn't sync to this path because it is mounted from a ConfigMap as ReadOnly

# Pipelines used for vcluster
pipelines:
  dev:
    flags:
      - name: distro
        description: "Virtual cluster distribution to use"
        default: "k8s"
        type: string
    run: |-
      # Deploy the vcluster
      run_pipelines deploy --set-flag distro=$(get_flag distro)

      # Start dev mode
      start_dev --all

  deploy:
    flags:
      - name: distro
        description: "Virtual cluster distribution to use"
        default: "k8s"
        type: string
    run: |-
      # Make sure pull secrets are there
      ensure_pull_secrets --all

      # Build the vcluster image
      build_images --all

      # Deploy the vcluster
      if is_equal $(get_flag distro) k8s; then
        create_deployments vcluster-k8s
      elif is_equal $(get_flag distro) k0s; then
        create_deployments vcluster-k0s
      else
        create_deployments vcluster-k3s
      fi

  purge:
    run: |-
      # Purge the vcluster
      run_default_pipeline purge

      # Make sure the pvcs are deleted as well
      kubectl delete pvc --all -n ${DEVSPACE_NAMESPACE}

profiles:
  - name: test-k3s
    patches:
      - op: add
        path: deployments.vcluster-k3s.helm
        value:
          valuesFiles:
            - ${COMMON_VALUES}
            - ${VALUES_FILE}

  - name: test-k8s
    patches:
      - op: add
        path: deployments.vcluster-k8s.helm
        value:
          valuesFiles:
            - ${COMMON_VALUES}
            - ${VALUES_FILE}

  - name: test-k0s
    patches:
      - op: add
        path: deployments.vcluster-k0s.helm
        value:
          valuesFiles:
            - ${COMMON_VALUES}
            - ${VALUES_FILE}
  - name: test-pro
    patches:
      - op: add
        path: deployments.vcluster-k8s.helm
        value:
          valuesFiles:
            - ${COMMON_VALUES}
            - ${VALUES_FILE}
            - ${PRO_VALUES}

commands:
  # e.g. devspace run test k3s
  # e.g. devspace run test k3s --var VALUES_FILE=./test/functional_tests/e2e_node
  test: |-
    devspace purge -n ${DEVSPACE_NAMESPACE} --debug
    devspace dev -n ${DEVSPACE_NAMESPACE} --profile test-$@
