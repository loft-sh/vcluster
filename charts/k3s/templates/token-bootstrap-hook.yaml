{{- if (and (.Values.hooks.tokenBootstrap.enabled) (.Values.enableHA) (not .Values.serverToken.secretKeyRef)) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-bootstrap-tokens
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
type: Opaque
data:
{{- if .Values.serverToken.value }}
  server-token: {{ .Values.serverToken.value | b64enc | quote }}
{{- else }}
  server-token: {{ (randAlphaNum 32) | b64enc | quote }}
{{- end }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-token-bootstrapper
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: [{{ include "vcluster.k3s.tokenSecretName" . | quote }}]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-token-bootstrapper
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-token-bootstrapper
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-token-bootstrapper
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-token-bootstrapper
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
{{- if .Values.serviceAccount.imagePullSecrets }}
imagePullSecrets:
{{ toYaml .Values.serviceAccount.imagePullSecrets | indent 2 }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-token-bootstrapper
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      name: {{ .Release.Name }}-token-bootstrapper
      {{- if .Values.hooks.tokenBootstrap.podAnnotations }}
      annotations:
{{ toYaml .Values.hooks.tokenBootstrap.podAnnotations | indent 8 }}
      {{- end }}
      {{- if .Values.hooks.tokenBootstrap.podLabels }}
      labels:
{{ toYaml .Values.hooks.tokenBootstrap.podLabels | indent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Release.Name }}-token-bootstrapper
      restartPolicy: OnFailure
      nodeSelector:
{{ toYaml .Values.hooks.tokenBootstrap.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.hooks.tokenBootstrap.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.hooks.tokenBootstrap.tolerations | indent 8 }}
      {{- if .Values.hooks.tokenBootstrap.priorityClassName }}
      priorityClassName: {{ .Values.hooks.tokenBootstrap.priorityClassName }}
      {{- end }}
      {{- if .Values.isolation.enabled }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      {{- end }}
      containers:
        - name: token-bootstrapper
          image: {{ .Values.defaultImageRegistry }}{{ .Values.vcluster.image }}
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
          args:
            - |
              echo "[INFO] Generating k3s server token ..."

              namespace="{{ .Release.Namespace }}"
              secret="{{ include "vcluster.k3s.tokenSecretName" . }}"
              key="{{ include "vcluster.k3s.serverTokenKey" . }}"

              echo "[INFO] Checking for existing secret ..."
              if kubectl --namespace "${namespace}" get secret "${secret}"; then
                echo "[INFO] Secret already exists, skipping generation ..."
                exit 0
              fi

              echo "[INFO] Creating secret with k3s server token ..."
              kubectl --namespace "${namespace}" create secret generic "${secret}" \
                --from-file="${key}=/tokens/server-token"
          securityContext:
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: bootstrap-tokens
              mountPath: /tokens
          resources:
{{ toYaml .Values.hooks.tokenBootstrap.resources | indent 12 }}
      volumes:
        - name: bootstrap-tokens
          secret:
            secretName: {{ .Release.Name }}-bootstrap-tokens
{{- end }}
