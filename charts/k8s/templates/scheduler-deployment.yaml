{{- if and .Values.sync.nodes.enableScheduler (not .Values.scheduler.disabled) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vcluster.name" . }}-scheduler
  namespace: {{ .Release.Namespace }}
  labels:
    app: vcluster-scheduler
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ template "vcluster.name" . }}"
    heritage: "{{ .Release.Service }}"
{{- if .Values.scheduler.labels }}
{{ toYaml .Values.scheduler.labels | indent 4 }}
{{- end }}
  {{- if .Values.scheduler.annotations }}
  annotations:
{{ toYaml .Values.scheduler.annotations | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.scheduler.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      {{- if (eq (int .Values.scheduler.replicas) 1) }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: vcluster-scheduler
      release: {{ template "vcluster.name" . }}
  template:
    metadata:
  {{- if .Values.scheduler.podAnnotations }}
      annotations:
{{ toYaml .Values.scheduler.podAnnotations | indent 8 }}
  {{- end }}
      labels:
        app: vcluster-scheduler
        release: {{ template "vcluster.name" . }}
      {{- range $k, $v := .Values.scheduler.podLabels }}
        {{ $k }}: {{ $v | quote }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: 10
      {{- if .Values.scheduler.affinity }}
      affinity:
{{ toYaml .Values.scheduler.affinity | indent 8 }}
      {{- else if .Values.enableHA }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # if possible avoid scheduling more than one pod on one node
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vcluster-scheduler
                - key: release
                  operator: In
                  values:
                  - {{ template "vcluster.name" . }}
              topologyKey: "kubernetes.io/hostname"
          # if possible avoid scheduling pod onto node that is in the same zone as one or more vcluster pods are running
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vcluster-scheduler
                - key: release
                  operator: In
                  values:
                  - {{ template "vcluster.name" . }}
              topologyKey: topology.kubernetes.io/zone
      {{- end }}
      {{- if .Values.scheduler.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.scheduler.topologySpreadConstraints | indent 8 }}
      {{- end }}
      nodeSelector:
{{ toYaml .Values.scheduler.nodeSelector | indent 8 }}
      tolerations:
{{ toYaml .Values.scheduler.tolerations | indent 8 }}
      automountServiceAccountToken: false
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- else }}
      serviceAccountName: vc-{{ template "vcluster.name" . }}
      {{- end }}
      volumes:
        - name: certs
          secret:
            secretName: {{ template "vcluster.name" . }}-certs
      {{- if .Values.scheduler.volumes }}
{{ toYaml .Values.scheduler.volumes | indent 8 }}
      {{- end }}
      {{- if .Values.scheduler.priorityClassName }}
      priorityClassName: {{ .Values.scheduler.priorityClassName }}
      {{- end }}
      containers:
      - name: kube-scheduler
        image: "{{ .Values.defaultImageRegistry }}{{ .Values.scheduler.image }}"
        command:
          - kube-scheduler
          - '--authentication-kubeconfig=/run/config/pki/scheduler.conf'
          - '--authorization-kubeconfig=/run/config/pki/scheduler.conf'
          - '--bind-address=0.0.0.0'
          - '--kubeconfig=/run/config/pki/scheduler.conf'
          {{- if .Values.enableHA }}
          - '--leader-elect=true'
          {{- else }}
          - '--leader-elect=false'
          {{- end }}
          {{- range $f := .Values.scheduler.extraArgs }}
          - {{ $f | quote }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 8
        startupProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 24
        securityContext:
{{ toYaml .Values.scheduler.securityContext | indent 10 }}
        env:
{{ toYaml .Values.scheduler.env | indent 10 }}
        volumeMounts:
          - mountPath: /run/config/pki
            name: certs
            readOnly: true
        {{- if .Values.scheduler.volumeMounts }}
{{ toYaml .Values.scheduler.volumeMounts | indent 10 }}
        {{- end }}
        resources:
{{ toYaml .Values.scheduler.resources | indent 10 }}
{{- end }}