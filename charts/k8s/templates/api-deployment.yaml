{{- if not .Values.headless }}
{{- if not .Values.api.disabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  namespace: {{ .Release.Namespace }}
  labels:
    app: vcluster-api
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
{{- if .Values.api.labels }}
{{ toYaml .Values.api.labels | indent 4 }}
{{- end }}
  {{- if .Values.api.annotations }}
  annotations:
{{ toYaml .Values.api.annotations | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.api.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      {{- if (eq (int .Values.api.replicas) 1) }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: vcluster-api
      release: {{ .Release.Name }}
  template:
    metadata:
  {{- if .Values.api.podAnnotations }}
      annotations:
{{ toYaml .Values.api.podAnnotations | indent 8 }}
  {{- end }}
      labels:
        app: vcluster-api
        release: {{ .Release.Name }}
      {{- range $k, $v := .Values.api.podLabels }}
        {{ $k }}: {{ $v | quote }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: 10
      {{- if .Values.api.affinity }}
      affinity: 
{{ toYaml .Values.api.affinity | indent 8 }}
      {{- else if .Values.enableHA }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # if possible avoid scheduling more than one pod on one node
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vcluster-api
                - key: release
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
          # if possible avoid scheduling pod onto node that is in the same zone as one or more vcluster pods are running
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vcluster-api
                - key: release
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: topology.kubernetes.io/zone
      {{- end }}
      {{- if .Values.api.topologySpreadConstraints }}
      topologySpreadConstraints: 
{{ toYaml .Values.api.topologySpreadConstraints | indent 8 }}
      {{- end }}
      nodeSelector:
{{ toYaml .Values.api.nodeSelector | indent 8 }}
      tolerations:
{{ toYaml .Values.api.tolerations | indent 8 }}
      automountServiceAccountToken: false
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- else }}
      serviceAccountName: vc-{{ .Release.Name }}
      {{- end }}
      volumes:
        - name: certs
          secret:
            secretName: {{ .Release.Name }}-certs
      {{- if .Values.api.volumes }}
{{ toYaml .Values.api.volumes | indent 8 }}
      {{- end }}
      {{- if .Values.api.priorityClassName }}
      priorityClassName: {{ .Values.api.priorityClassName }}
      {{- end }}
      containers:
      - name: kube-apiserver
        image: "{{ .Values.defaultImageRegistry }}{{ .Values.api.image }}"
        command:
          - kube-apiserver
          - '--advertise-address=0.0.0.0'
          - '--allow-privileged=true'
          - '--authorization-mode=RBAC'
          - '--client-ca-file=/run/config/pki/ca.crt'
          - '--enable-bootstrap-token-auth=true'
          - '--etcd-cafile=/run/config/pki/etcd-ca.crt'
          - '--etcd-certfile=/run/config/pki/apiserver-etcd-client.crt'
          - '--etcd-keyfile=/run/config/pki/apiserver-etcd-client.key'
          - '--etcd-servers=https://{{ .Release.Name }}-etcd:2379'
          - '--proxy-client-cert-file=/run/config/pki/front-proxy-client.crt'
          - '--proxy-client-key-file=/run/config/pki/front-proxy-client.key'
          - '--requestheader-allowed-names=front-proxy-client'
          - '--requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt'
          - '--requestheader-extra-headers-prefix=X-Remote-Extra-'
          - '--requestheader-group-headers=X-Remote-Group'
          - '--requestheader-username-headers=X-Remote-User'
          - '--secure-port=6443'
          - '--service-account-issuer=https://kubernetes.default.svc.cluster.local'
          - '--service-account-key-file=/run/config/pki/sa.pub'
          - '--service-account-signing-key-file=/run/config/pki/sa.key'
          {{- if .Values.serviceCIDR }}
          - '--service-cluster-ip-range={{ .Values.serviceCIDR }}'
          {{- else }}
          - '--service-cluster-ip-range=$(SERVICE_CIDR)'
          {{- end }}
          - '--tls-cert-file=/run/config/pki/apiserver.crt'
          - '--tls-private-key-file=/run/config/pki/apiserver.key'
          - '--watch-cache=false'
          - '--endpoint-reconciler-type=none'
          {{- range $f := .Values.api.extraArgs }}
          - {{ $f | quote }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /livez
            port: 6443
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 8
        readinessProbe:
          httpGet:
            path: /readyz
            port: 6443
            scheme: HTTPS
          timeoutSeconds: 15
          periodSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        {{- if .Values.api.imagePullPolicy }}
        imagePullPolicy: {{ .Values.api.imagePullPolicy }}
        {{- end }}
        securityContext:
{{ toYaml .Values.api.securityContext | indent 10 }}
        env:
          {{- if .Values.api.env }}
{{ toYaml .Values.api.env | indent 10 }}
          {{- end }}
          {{- if not .Values.serviceCIDR }}
          - name: SERVICE_CIDR
            valueFrom:
              configMapKeyRef:
                name: "vc-cidr-{{ .Release.Name }}"
                key: cidr
          {{- end }}
        volumeMounts:
          - mountPath: /run/config/pki
            name: certs
            readOnly: true
        {{- if .Values.api.volumeMounts }}
{{ toYaml .Values.api.volumeMounts | indent 10 }}
        {{- end }}
        resources:
{{ toYaml .Values.api.resources | indent 10 }}
{{- end }}
{{- end }}