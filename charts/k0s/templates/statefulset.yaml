apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: vcluster
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}
  {{- if .Values.annotations }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
  {{- end }}
spec:
  serviceName: {{ .Release.Name }}-headless
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: vcluster
      release: {{ .Release.Name }}
  {{- if .Values.storage.persistence }}
  {{- if not .Values.storage.volumeClaimTemplates }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.storage.className }}
        resources:
          requests:
            storage: {{ .Values.storage.size }}
  {{- else }}
  volumeClaimTemplates:
{{ toYaml .Values.volumeClaimTemplates | indent 4 }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        app: vcluster
        release: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: 10
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- else }}
      serviceAccountName: vc-{{ .Release.Name }}
      {{- end }}
      volumes:
      - name: k0s-config
        secret:
          secretName: vc-{{ .Release.Name }}-config
      {{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 8 }}
      {{- end }}
      {{- if not .Values.storage.persistence }}
      - name: data
        emptyDir: {}
      {{- end }}
      containers:
      {{- if not .Values.vcluster.disabled }}
      - image: {{ .Values.defaultImageRegistry }}{{ .Values.vcluster.image }}
        name: vcluster
        command:
          {{- range $f := .Values.vcluster.command }}
          - {{ $f | quote }}
          {{- end }}
        args:
          {{- range $f := .Values.vcluster.baseArgs }}
          - {{ $f | quote }}
          {{- end }}
          {{- range $f := .Values.vcluster.extraArgs }}
          - {{ $f | quote }}
          {{- end }}
        env:
{{ toYaml .Values.vcluster.env | indent 10 }}
        securityContext:
{{ toYaml .Values.securityContext | indent 10 }}
        volumeMounts:
{{ toYaml .Values.vcluster.volumeMounts | indent 10 }}
        resources:
{{ toYaml .Values.vcluster.resources | indent 10 }}
      {{- end }}
      {{- if not .Values.syncer.disabled }}
      - name: syncer
        {{- if .Values.syncer.image }}
        image: "{{ .Values.defaultImageRegistry }}{{ .Values.syncer.image }}"
        {{- else }}
        image: "{{ .Values.defaultImageRegistry }}loftsh/vcluster:{{ .Chart.Version }}"
        {{- end }}
        {{- if .Values.syncer.workingDir }}
        workingDir: {{ .Values.syncer.workingDir }}
        {{- end }}
        {{- if .Values.syncer.command }}
        command:
        {{- range $f := .Values.syncer.command }}
        - {{ $f | quote }}
        {{- end }}
        {{- end }}
        {{- if not .Values.syncer.noArgs }}
        args:
          - --name={{ .Release.Name }}
          - --request-header-ca-cert=/data/k0s/pki/ca.crt
          - --client-ca-cert=/data/k0s/pki/ca.crt
          - --server-ca-cert=/data/k0s/pki/ca.crt
          - --server-ca-key=/data/k0s/pki/ca.key
          - --kube-config=/data/k0s/pki/admin.conf
          {{- if .Values.defaultImageRegistry }}
          - --default-image-registry={{ .Values.defaultImageRegistry }}
          {{- end }}
          {{- if .Values.ingress.enabled }}
          - --tls-san={{ .Values.ingress.host }}
          {{- end }}
          {{- range $f := .Values.syncer.extraArgs }}
          - {{ $f | quote }}
          {{- end }}
        {{- else }}
        args:
{{ toYaml .Values.syncer.extraArgs | indent 10 }}
        {{- end }}
        {{- if .Values.syncer.livenessProbe }}
        {{- if .Values.syncer.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          failureThreshold: 10
          initialDelaySeconds: 60
          periodSeconds: 2
        {{- end }}
        {{- end }}
        {{- if .Values.syncer.readinessProbe }}
        {{- if .Values.syncer.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
          failureThreshold: 30
          periodSeconds: 2
        {{- end }}
        {{- end }}
        securityContext:
{{ toYaml .Values.securityContext | indent 10 }}
        env:
{{ toYaml .Values.syncer.env | indent 10 }}
        volumeMounts:
{{ toYaml .Values.syncer.volumeMounts | indent 10 }}
        resources:
{{ toYaml .Values.syncer.resources | indent 10 }}
      {{- end }}
      {{- range $key, $container := .Values.plugin }}
      - image: {{ $.Values.defaultImageRegistry }}{{ $container.image }}
        {{- if $container.name }}
        name: {{ $container.name | quote }}
        {{- else }}
        name: {{ $key | quote }}
        {{- end }}
        {{- if $container.imagePullPolicy }}
        imagePullPolicy: {{ $container.imagePullPolicy }}
        {{- end }}
        {{- if $container.workingDir }}
        workingDir: {{ $container.workingDir }}
        {{- end }}
        {{- if $container.command }}
        command:
          {{- range $commandIndex, $command := $container.command }}
          - {{ $command | quote }}
          {{- end }}
        {{- end }}
        {{- if $container.args }}
        args:
          {{- range $argIndex, $arg := $container.args }}
          - {{ $arg | quote }}
          {{- end }}
        {{- end }}
        {{- if $container.terminationMessagePath }}
        terminationMessagePath: {{ $container.terminationMessagePath }}
        {{- end }}
        {{- if $container.terminationMessagePolicy }}
        terminationMessagePolicy: {{ $container.terminationMessagePolicy }}
        {{- end }}
        env:
{{ toYaml $container.env | indent 10 }}
        envFrom:
{{ toYaml $container.envFrom | indent 10 }}
        securityContext:
{{ toYaml $container.securityContext | indent 10 }}
        lifecycle:
{{ toYaml $container.lifecycle | indent 10 }}
        livenessProbe:
{{ toYaml $container.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml $container.readinessProbe | indent 10 }}
        startupProbe:
{{ toYaml $container.startupProbe | indent 10 }}
        volumeDevices:
{{ toYaml $container.volumeDevices | indent 10 }}
        volumeMounts:
{{ toYaml $container.volumeMounts | indent 10 }}
        {{- if $container.resources }}
        resources:
{{ toYaml $container.resources | indent 10 }}
        {{- end }}
        {{- end }}