# DefaultImageRegistry will be prepended to all deployed vcluster images, such as the vcluster pod, coredns etc.. Deployed
# images within the vcluster will not be rewritten.
defaultImageRegistry: ""

globalAnnotations: {}

# If true, will deploy vcluster in headless mode, which means no deployment
# or statefulset is created.
headless: false

# If the control plane is deployed in high availability mode
# Make sure to scale up the syncer.replicas, etcd.replicas, api.replicas & controller.replicas
enableHA: false

# Plugins that should get loaded. Usually you want to apply those via 'vcluster create ... -f https://.../plugin.yaml'
plugin: {}
# Manually configure a plugin called test
# test:
#   image: ...
#   env: ...
#   rbac:
#     clusterRole:
#       extraRules: ...
#     role:
#       extraRules: ...

# Resource syncers that should be enabled/disabled.
# Enabling syncers will impact RBAC Role and ClusterRole permissions.
# To disable a syncer set "enabled: false".
# See docs for details - https://www.vcluster.com/docs/architecture/synced-resources
sync:
  services:
    enabled: true
  configmaps:
    enabled: true
    all: false
  secrets:
    enabled: true
    all: false
  endpoints:
    enabled: true
  pods:
    enabled: true
    ephemeralContainers: false
    status: false
  events:
    enabled: true
  persistentvolumeclaims:
    enabled: true
  ingresses:
    enabled: false
  ingressclasses: {}
    # By default IngressClasses sync is enabled when the Ingress sync is enabled
    # but it can be explicitly disabled by setting:
    # enabled: false
  fake-nodes:
    enabled: true # will be ignored if nodes.enabled = true
  fake-persistentvolumes:
    enabled: true # will be ignored if persistentvolumes.enabled = true
  nodes:
    fakeKubeletIPs: true
    enabled: false
    # If nodes sync is enabled, and syncAllNodes = true, the virtual cluster
    # will sync all nodes instead of only the ones where some pods are running.
    syncAllNodes: false
    # nodeSelector is used to limit which nodes get synced to the vcluster,
    # and which nodes are used to run vcluster pods.
    # A valid string representation of a label selector must be used.
    nodeSelector: ""
    # syncNodeChanges allows vcluster user edits of the nodes to be synced down to the host nodes.
    # Write permissions on node resource will be given to the vcluster.
    syncNodeChanges: false
  persistentvolumes:
    enabled: false
  storageclasses:
    enabled: false
  # formerly named - "legacy-storageclasses"
  hoststorageclasses:
    enabled: false
  priorityclasses:
    enabled: false
  networkpolicies:
    enabled: false
  volumesnapshots:
    enabled: false
  poddisruptionbudgets:
    enabled: false
  serviceaccounts:
    enabled: false
  # generic CRD configuration
  generic:
    config: |-
      ---

# If enabled, will fallback to host dns for resolving domains. This
# is useful if using istio or dapr in the host cluster and sidecar
# containers cannot connect to the central instance. Its also useful
# if you want to access host cluster services from within the vcluster.
fallbackHostDns: false

# Map Services between host and virtual cluster
mapServices:
  # Services that should get mapped from the
  # virtual cluster to the host cluster.
  # vcluster will make sure to sync the service
  # ip to the host cluster automatically as soon
  # as the service exists.
  # For example:
  # fromVirtual:
  #   from: my-namespace/name
  #   to: host-service
  fromVirtual: []
  # Same as from virtual, but instead sync services
  # from the host cluster into the virtual cluster.
  # If the namespace does not exist, vcluster will
  # also create the namespace for the service.
  fromHost: []

proxy:
  metricsServer:
    nodes:
      enabled: false
    pods:
      enabled: false


# Syncer configuration
syncer:
  # Image to use for the syncer
  # image: ghcr.io/loft-sh/vcluster
  extraArgs: []
  volumeMounts:
    - mountPath: /manifests/coredns
      name: coredns
      readOnly: true
    - mountPath: /pki
      name: certs
      readOnly: true
  extraVolumeMounts: []
  env: []
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 10m
      memory: 64Mi
  # Extra volumes
  volumes: []
  # The amount of replicas to run the deployment with
  replicas: 1
  # NodeSelector used to schedule the syncer
  nodeSelector: {}
  # Affinity to apply to the syncer deployment
  affinity: {}
  # Tolerations to apply to the syncer deployment
  tolerations: []
  # Extra Labels for the syncer deployment
  labels: {}
  # Extra Annotations for the syncer deployment
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  kubeConfigContextName: "my-vcluster"
  # Security context configuration
  securityContext: {}
  podSecurityContext: {}
  serviceAnnotations: {}

# Etcd settings
etcd:
  image: public.ecr.aws/eks-distro/etcd-io/etcd:v3.5.6-eks-1-24-7
  # The amount of replicas to run
  replicas: 1
  # NodeSelector used
  nodeSelector: {}
  # Affinity to apply
  affinity: {}
  # Tolerations to apply
  tolerations: []
  # Extra Labels
  labels: {}
  # Extra Annotations
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  resources:
    requests:
      cpu: 20m
      memory: 150Mi
  # Storage settings for the etcd
  storage:
    # If this is disabled, vcluster will use an emptyDir instead
    # of a PersistentVolumeClaim
    persistence: true
    # Size of the persistent volume claim
    size: 5Gi
    # Optional StorageClass used for the pvc
    # if empty default StorageClass defined in your host cluster will be used
    #className:
  priorityClassName: ""
  securityContext: {}
  serviceAnnotations: {}

# Kubernetes Controller Manager settings
controller:
  image: public.ecr.aws/eks-distro/kubernetes/kube-controller-manager:v1.24.9-eks-1-24-7
  # The amount of replicas to run the deployment with
  replicas: 1
  # NodeSelector used
  nodeSelector: {}
  # Affinity to apply
  affinity: {}
  # Tolerations to apply
  tolerations: []
  # Extra Labels
  labels: {}
  # Extra Annotations
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  resources:
    requests:
      cpu: 15m
  priorityClassName: ""
  securityContext: {}

# Kubernetes API Server settings
api:
  image: public.ecr.aws/eks-distro/kubernetes/kube-apiserver:v1.24.9-eks-1-24-7
  extraArgs: []
  # The amount of replicas to run the deployment with
  replicas: 1
  # NodeSelector used to schedule the syncer
  nodeSelector: {}
  # Affinity to apply to the syncer deployment
  affinity: {}
  # Tolerations to apply to the syncer deployment
  tolerations: []
  # Extra Labels for the syncer deployment
  labels: {}
  # Extra Annotations for the syncer deployment
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  resources:
    requests:
      cpu: 40m
      memory: 300Mi
  priorityClassName: ""
  securityContext: {}
  serviceAnnotations: {}

# Core DNS settings
coredns:
  enabled: true
  image: public.ecr.aws/eks-distro/coredns/coredns:v1.8.7-eks-1-24-7
  replicas: 1
  # CoreDNS service configurations
  service:
    # Extra Annotations
    annotations: {}
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      # ensure that cpu/memory requests are high enough.
      # for example gke wants minimum 10m/32Mi here!
      cpu: 20m
      memory: 64Mi
# if below option is configured, it will override the coredns manifests with the following string
#  manifests: |-
#    apiVersion: ...
#    ...
  podAnnotations: {}
  podLabels: {}

# Service account that should be used by the vcluster
serviceAccount:
  create: true
  # Optional name of the service account to use
  # name: default
  # Optional pull secrets
  # imagePullSecrets:
  #   - name: my-pull-secret

# Service account that should be used by the pods synced by vcluster
workloadServiceAccount:
  # This is not supported in multi-namespace mode
  annotations: {}

# Roles & ClusterRoles for the vcluster
rbac:
  clusterRole:
    # Deprecated !
    # Necessary cluster roles are created based on the enabled syncers (.sync.*.enabled)
    # Support for this value will be removed in a future version of the vcluster
    create: false
  role:
    # Deprecated !
    # Support for this value will be removed in a future version of the vcluster
    # and basic role will always be created
    create: true
    # Deprecated !
    # Necessary extended roles are created based on the enabled syncers (.sync.*.enabled)
    # Support for this value will be removed in a future version of the vcluster
    extended: false

# Syncer service configurations
service:
  type: ClusterIP

  # Optional configuration
  # A list of IP addresses for which nodes in the cluster will also accept traffic for this service.
  # These IPs are not managed by Kubernetes; e.g., an external load balancer.
  externalIPs: []

  # Optional configuration for LoadBalancer & NodePort service types
  # Route external traffic to node-local or cluster-wide endpoints [ Local | Cluster ]
  externalTrafficPolicy: ""

  # Optional configuration for LoadBalancer service type
  # Specify IP of load balancer to be created
  loadBalancerIP: ""
  # CIDR block(s) for the service allowlist
  loadBalancerSourceRanges: []
  # Set the loadBalancerClass if using an external load balancer controller
  loadBalancerClass: ""

# job configuration
job:
  enabled: true
  volumes: []
  volumeMounts: []
  extraArgs: []
  priorityClassName: ""
  nodeSelector: {}
  affinity: {}
  tolerations: []
  resources: {}
  podAnnotations: {}
  podLabels: {}
  # Security context configuration of the container
  securityContext:
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001

# Configure the ingress resource that allows you to access the vcluster
ingress:
  # Enable ingress record generation
  enabled: false
  # Ingress path type
  pathType: ImplementationSpecific
  apiVersion: networking.k8s.io/v1
  ingressClassName: ""
  host: vcluster.local
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  # Ingress TLS configuration
  tls: []
    # - secretName: tls-vcluster.local
    #   hosts:
    #     - vcluster.local

# Set "enable" to true when running vcluster in an OpenShift host
# This will add an extra rule to the deployed role binding in order
# to manage service endpoints
openshift:
  enable: false

# manifests to setup when initializing a vcluster
init:
  manifests: |-
    ---
  # The contents of manifests-template will be templated using helm
  # this allows you to use helm values inside, e.g.: {{ .Release.Name }}
  manifestsTemplate: ''
  helm: []

# If enabled will deploy vcluster in an isolated mode with pod security
# standards, limit ranges and resource quotas
isolation:
  enabled: false
  namespace: null

  podSecurityStandard: baseline

  # If enabled will add node/proxy permission to the cluster role
  # in isolation mode
  nodeProxyPermission:
    enabled: false

  resourceQuota:
    enabled: true
    quota:
      requests.cpu: 10
      requests.memory: 20Gi
      requests.storage: "100Gi"
      requests.ephemeral-storage: 60Gi
      limits.cpu: 20
      limits.memory: 40Gi
      limits.ephemeral-storage: 160Gi
      services.nodeports: 0
      services.loadbalancers: 1
      count/endpoints: 40
      count/pods: 20
      count/services: 20
      count/secrets: 100
      count/configmaps: 100
      count/persistentvolumeclaims: 20
    scopeSelector:
      matchExpressions:
    scopes:

  limitRange:
    enabled: true
    default:
      ephemeral-storage: 8Gi
      memory: 512Mi
      cpu: "1"
    defaultRequest:
      ephemeral-storage: 3Gi
      memory: 128Mi
      cpu: 100m

  networkPolicy:
    enabled: true
    outgoingConnections:
      ipBlock:
        cidr: 0.0.0.0/0
        except:
          - 100.64.0.0/10
          - 127.0.0.0/8
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16

multiNamespaceMode:
  enabled: false

telemetry:
  disabled: "false"
  instanceCreator: "helm"
  instanceCreatorUID: ""
