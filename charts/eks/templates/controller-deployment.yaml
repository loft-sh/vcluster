{{- if not .Values.headless }}
{{- if not .Values.controller.disabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app: vcluster-controller
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
{{- if .Values.controller.labels }}
{{ toYaml .Values.controller.labels | indent 4 }}
{{- end }}
  {{- $annotations := merge .Values.globalAnnotations .Values.controller.annotations }}
  {{- if $annotations }}
  annotations:
{{ toYaml $annotations | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.controller.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      {{- if (eq (int .Values.controller.replicas) 1) }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: vcluster-controller
      release: {{ .Release.Name }}
  template:
    metadata:
  {{- if .Values.controller.podAnnotations }}
      annotations:
{{ toYaml .Values.controller.podAnnotations | indent 8 }}
  {{- end }}
      labels:
        app: vcluster-controller
        release: {{ .Release.Name }}
      {{- range $k, $v := .Values.controller.podLabels }}
        {{ $k }}: {{ $v | quote }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: 10
      {{- if .Values.controller.affinity }}
      affinity:
{{ toYaml .Values.controller.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.controller.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.controller.topologySpreadConstraints | indent 8 }}
      {{- end }}
      nodeSelector:
{{ toYaml .Values.controller.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.controller.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.controller.tolerations | indent 8 }}
      automountServiceAccountToken: false
      volumes:
        - name: certs
          secret:
            secretName: {{ .Release.Name }}-certs
      {{- if .Values.controller.volumes }}
{{ toYaml .Values.controller.volumes | indent 8 }}
      {{- end }}
      {{- if .Values.controller.priorityClassName }}
      priorityClassName: {{ .Values.controller.priorityClassName }}
      {{- end }}
      containers:
      - name: kube-controller-manager
        image: "{{ .Values.defaultImageRegistry }}{{ .Values.controller.image }}"
        command:
          - kube-controller-manager
          - '--authentication-kubeconfig=/run/config/pki/controller-manager.conf'
          - '--authorization-kubeconfig=/run/config/pki/controller-manager.conf'
          - '--bind-address=0.0.0.0'
          - '--client-ca-file=/run/config/pki/ca.crt'
          - '--cluster-name=kubernetes'
          - '--cluster-signing-cert-file=/run/config/pki/ca.crt'
          - '--cluster-signing-key-file=/run/config/pki/ca.key'
          - '--controllers=*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle,-ttl'
          - '--horizontal-pod-autoscaler-sync-period=60s'
          - '--kubeconfig=/run/config/pki/controller-manager.conf'
          - '--profiling=false'
          {{- if .Values.serviceCIDR }}
          - '--service-cluster-ip-range={{ .Values.serviceCIDR }}'
          {{- else }}
          - '--service-cluster-ip-range=$(SERVICE_CIDR)'
          {{- end }}
          - '--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'
          - '--use-service-account-credentials=true'
          {{- if .Values.enableHA }}
          - '--leader-elect=true'
          {{- else }}
          - '--leader-elect=false'
          {{- end }}
          - '--node-monitor-grace-period=180s'
          - '--node-monitor-period=30s'
          - '--pvclaimbinder-sync-period=60s'
          - '--requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt'
          - '--root-ca-file=/run/config/pki/ca.crt'
          - '--service-account-private-key-file=/run/config/pki/sa.key'
          - '--use-service-account-credentials=true'
          {{- range $f := .Values.controller.extraArgs }}
          - {{ $f | quote }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 8
        startupProbe:
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 24
        securityContext:
{{ toYaml .Values.controller.securityContext | indent 10 }}
        env:
          {{- if .Values.controller.env }}
{{ toYaml .Values.controller.env | indent 10 }}
          {{- end }}
          {{- if not .Values.serviceCIDR }}
          - name: SERVICE_CIDR
            valueFrom:
              configMapKeyRef:
                name: "vc-cidr-{{ .Release.Name }}"
                key: cidr
          {{- end }}
        volumeMounts:
          - mountPath: /run/config/pki
            name: certs
            readOnly: true
        {{- if .Values.controller.volumeMounts }}
{{ toYaml .Values.controller.volumeMounts | indent 10 }}
        {{- end }}
        resources:
{{ toYaml .Values.controller.resources | indent 10 }}
{{- end }}
{{- end }}